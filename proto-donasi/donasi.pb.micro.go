// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: donasi.proto

package proto_donasi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DonasiService service

type DonasiService interface {
	AddEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	RemoveEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	UpdateEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	GetEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	GetCategory(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	SaveTransaction(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	GetTransaction(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	GetObjectImage(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	GetEventMB(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	UpdateStatusEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	RemoveDenom(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	RemoveTier(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	AddCategory(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
	UpdateCategory(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error)
}

type donasiService struct {
	c    client.Client
	name string
}

func NewDonasiService(name string, c client.Client) DonasiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "donasi"
	}
	return &donasiService{
		c:    c,
		name: name,
	}
}

func (c *donasiService) AddEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.AddEvent", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) RemoveEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.RemoveEvent", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) UpdateEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.UpdateEvent", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) GetEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.GetEvent", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) GetCategory(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.GetCategory", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) SaveTransaction(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.SaveTransaction", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) GetTransaction(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.GetTransaction", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) GetObjectImage(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.GetObjectImage", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) GetEventMB(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.GetEventMB", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) UpdateStatusEvent(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.UpdateStatusEvent", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) RemoveDenom(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.RemoveDenom", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) RemoveTier(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.RemoveTier", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) AddCategory(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.AddCategory", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donasiService) UpdateCategory(ctx context.Context, in *APIREQ, opts ...client.CallOption) (*APIRES, error) {
	req := c.c.NewRequest(c.name, "DonasiService.UpdateCategory", in)
	out := new(APIRES)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DonasiService service

type DonasiServiceHandler interface {
	AddEvent(context.Context, *APIREQ, *APIRES) error
	RemoveEvent(context.Context, *APIREQ, *APIRES) error
	UpdateEvent(context.Context, *APIREQ, *APIRES) error
	GetEvent(context.Context, *APIREQ, *APIRES) error
	GetCategory(context.Context, *APIREQ, *APIRES) error
	SaveTransaction(context.Context, *APIREQ, *APIRES) error
	GetTransaction(context.Context, *APIREQ, *APIRES) error
	GetObjectImage(context.Context, *APIREQ, *APIRES) error
	GetEventMB(context.Context, *APIREQ, *APIRES) error
	UpdateStatusEvent(context.Context, *APIREQ, *APIRES) error
	RemoveDenom(context.Context, *APIREQ, *APIRES) error
	RemoveTier(context.Context, *APIREQ, *APIRES) error
	AddCategory(context.Context, *APIREQ, *APIRES) error
	UpdateCategory(context.Context, *APIREQ, *APIRES) error
}

func RegisterDonasiServiceHandler(s server.Server, hdlr DonasiServiceHandler, opts ...server.HandlerOption) error {
	type donasiService interface {
		AddEvent(ctx context.Context, in *APIREQ, out *APIRES) error
		RemoveEvent(ctx context.Context, in *APIREQ, out *APIRES) error
		UpdateEvent(ctx context.Context, in *APIREQ, out *APIRES) error
		GetEvent(ctx context.Context, in *APIREQ, out *APIRES) error
		GetCategory(ctx context.Context, in *APIREQ, out *APIRES) error
		SaveTransaction(ctx context.Context, in *APIREQ, out *APIRES) error
		GetTransaction(ctx context.Context, in *APIREQ, out *APIRES) error
		GetObjectImage(ctx context.Context, in *APIREQ, out *APIRES) error
		GetEventMB(ctx context.Context, in *APIREQ, out *APIRES) error
		UpdateStatusEvent(ctx context.Context, in *APIREQ, out *APIRES) error
		RemoveDenom(ctx context.Context, in *APIREQ, out *APIRES) error
		RemoveTier(ctx context.Context, in *APIREQ, out *APIRES) error
		AddCategory(ctx context.Context, in *APIREQ, out *APIRES) error
		UpdateCategory(ctx context.Context, in *APIREQ, out *APIRES) error
	}
	type DonasiService struct {
		donasiService
	}
	h := &donasiServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DonasiService{h}, opts...))
}

type donasiServiceHandler struct {
	DonasiServiceHandler
}

func (h *donasiServiceHandler) AddEvent(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.AddEvent(ctx, in, out)
}

func (h *donasiServiceHandler) RemoveEvent(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.RemoveEvent(ctx, in, out)
}

func (h *donasiServiceHandler) UpdateEvent(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.UpdateEvent(ctx, in, out)
}

func (h *donasiServiceHandler) GetEvent(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.GetEvent(ctx, in, out)
}

func (h *donasiServiceHandler) GetCategory(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.GetCategory(ctx, in, out)
}

func (h *donasiServiceHandler) SaveTransaction(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.SaveTransaction(ctx, in, out)
}

func (h *donasiServiceHandler) GetTransaction(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.GetTransaction(ctx, in, out)
}

func (h *donasiServiceHandler) GetObjectImage(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.GetObjectImage(ctx, in, out)
}

func (h *donasiServiceHandler) GetEventMB(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.GetEventMB(ctx, in, out)
}

func (h *donasiServiceHandler) UpdateStatusEvent(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.UpdateStatusEvent(ctx, in, out)
}

func (h *donasiServiceHandler) RemoveDenom(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.RemoveDenom(ctx, in, out)
}

func (h *donasiServiceHandler) RemoveTier(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.RemoveTier(ctx, in, out)
}

func (h *donasiServiceHandler) AddCategory(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.AddCategory(ctx, in, out)
}

func (h *donasiServiceHandler) UpdateCategory(ctx context.Context, in *APIREQ, out *APIRES) error {
	return h.DonasiServiceHandler.UpdateCategory(ctx, in, out)
}
